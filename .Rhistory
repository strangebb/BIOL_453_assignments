getwd()
ls()
height <- 2
width <- 4
height * width
depth
ls()
area <- height * width
area
ls()
height <- 3
width <- 6
area <- height * width
area
```{r setup, echo=FALSE}
library(knitr)
opts_knit$set(root.dir='../')
```
library(knitr)
opts_knit$set(root.dir='../')
library(knitr)
opts_knit$set(root.dir='../')
library(knitr)
opts_knit$set(root.dir='../')
library(knitr)
opts_knit$set(root.dir='../')
3 + 4       # summation
3 * 4       # multiplication
3 / 4       # division
3^4         # exponents
log(3)      # log base e
log(3, 10)  # log base 10
log10(3)    # log base 10
exp(log(3)) # e
library(knitr)
opts_knit$set(root.dir='../')
```{r setup, echo=FALSE}
{r setup, echo=FALSE}
install.packages("knitrBootstrap")
library(knitr)
opts_knit$set(root.dir='../')
weight_kg <- 55
# print the value of the variable by simply calling its name
weight_kg
# weight in pounds:
2.2 * weight_kg
weight_kg <- 57.5
# weight in kilograms is now
weight_kg
weight_lb <- 2.2 * weight_kg
# weight in kg...
weight_kg
# ...and in pounds
weight_lb
weight_kg <- 100.0
# weight in kg now...
weight_kg
# ...and in weight pounds still
weight_lb
getwd()
dat <- read.csv(file = "./data/inflammation-01.csv", header = FALSE)
dat <- read.csv('http://dmcglinn.github.io/quant_methods/data/inflammation-01.csv',
header=F)
# above we used the function "read.csv" to find out more about this function see
?read.csv
# or equivalently
help(read.csv)
# to do a fuzzy help search use
help.search('read')
help.search('csv')
# visual summary of first 6 rows
head(dat)
# visual summary of last 6 rows
tail(dat)
# what kind of object is dat
class(dat)
# what are the dimensions of dat
dim(dat)
pdf('./lessons/inflammation_fig1.pdf')
pdf('./lessons/inflammation_fig1.pdf')
plot(avg_day_inflammation)
plot(1:length(avg_day_inflammation), avg_day_inflammation, xlab='day',
ylab='inflammation')
# first row, all of the columns
patient_1 <- dat[1, ]
# max inflammation for patient 1
max(patient_1)
# max inflammation for patient 2
max(dat[2, ])
# minimum inflammation on day 7
min(dat[, 7])
# mean inflammation on day 7
mean(dat[, 7])
# median inflammation on day 7
median(dat[, 7])
# standard deviation of inflammation on day 7
sd(dat[, 7])
summary(dat[ , 7])
avg_patient_inflammation <- apply(dat, 1, mean)
avg_day_inflammation <- apply(dat, 2, mean)
# standard deviation of day
sd_day_inflammation <- apply(dat, 2, sd)
# standard deviation of patients
sd_patient_inflammation <- apply(dat, 1, sd)
# use the function plot() to plot data
?plot
plot(avg_day_inflammation)
plot(1:length(avg_day_inflammation), avg_day_inflammation, xlab='day',
ylab='inflammation')
par(mfrow=c(2,1))
# which will create a single plotting row with two columns
plot(1:length(avg_day_inflammation), avg_day_inflammation, xlab='day',
ylab='inflammation')
plot(1:length(avg_patient_inflammation), avg_patient_inflammation,
xlab='patient identity', ylab='inflammation')
pdf('./lessons/inflammation_fig1.pdf')
pdf('./lessons/inflammation_fig1.pdf')
class(plot)
class(year)
class(record_id)
T
T = 1
TRUE = 1
TRUE
TRUE = FALSE
FALSE
as.numeric(FALSE)
could simply write this as
class(dat[,1])
class(dat[,1])
dat = read.csv('./data/tgpp.csv')
#James Strange, BIOL-453, Assignment 1
dat <- read.csv('http://dmcglinn.github.io/quant_methods/data/tgpp.csv', header=T)
#1.) What are the names of the columns in this dataset?
head(dat)
#column names are plot, year, record_id, corner, scale, richness, easting,
#northing, slope, ph, and yrsslb
#2.) How many rows and columns does this data file have?
dim(dat)
#4080 rows & 11 columns
#3.) What kind of object is each data column?
sapply(dat, class)
#4.) What are the values of the the datafile for rows
#1, 5, and 8 at columns 3, 7, and 10?
dat[1, ]
dat[5, ]
dat[8, ]
#[1,3]=187, [1,7]=727000, [1,10]=6.9
#[5,3]=191, [5,7]=727000, [5,10]=6.9
#[8,3]=194, [8,7]=727000, [8,10]=6.9
#5.) Create a pdf of the relationship between the variables âscaleâ and ârichnessâ.
#Scale is the area in square meters of the quadrat in which richness was recorded.
#Be sure to label your axes clearly, and choose a color you find pleasing for the
#points. To get a list of available stock colors use the function colors().
plot(dat$scale, dat$richness, xlab='scale', ylab='richness', col='royalblue')
pdf('./data/graph.pdf')
#6.) What happens to your plot when you set the plot argument log equal to âxyâ?
plot(dat$scale, dat$richness, xlab='scale', ylab='richness', col='royalblue', log=('xy'))
#More evenly-spaced scale of the x-axis, data points indicate less dispersion
#of richness values with increasing scale
git
knitr::opts_chunk$set(echo = TRUE)
trees = read.csv('https://raw.githubusercontent.com/dmcglinn/quant_methods/gh-pages/data/treedata_subset.csv')
trees$species == "Acer rubrum"
rubrum <- trees[trees$species == "Acer rubrum",]
trees$species == "Abies fraseri"
fraseri <- trees[trees$species == "Abies fraseri",]
library(ggplot2)
library(gridExtra)
library(scatterplot3d)
library(MASS)
#Acer rubrum elevation model
rubrum_elev_mod = lm(cover ~ elev, data = rubrum)
#Abies fraseri elevation model
fraseri_elev_mod = lm(cover ~ elev, data = fraseri)
par(mfrow=c(1,2))
plot(cover ~ elev, data = rubrum, xlab = 'Plot Elevation (m)',ylab = 'Abundance', main = 'Acer rubrum')
abline(rubrum_elev_mod)
plot(cover ~ elev, data = fraseri,
xlab = 'Plot Elevation (m)', ylab = 'Abundance', main = 'Abies fraseri')
abline(fraseri_elev_mod)
plot(cover ~ elev, data = trees, type = 'n',
xlab = 'Plot Elevation (m)', ylab = 'Abundance', main = 'Elevation vs. Abundance')
points(cover ~ elev, data = trees, subset = species == "Acer rubrum",
pch = 1, col = 'red')
lines(lowess(trees$elev[trees$species == 'Acer rubrum'],
trees$cover[trees$species == 'Acer rubrum']),
lty = 1, col = 'red')
points(cover ~ elev, data = trees, subset = species == "Abies fraseri",
pch = 2, col = 'blue')
lines(lowess(trees$elev[trees$species == 'Abies fraseri'],
trees$cover[trees$species == 'Abies fraseri']),
lty = 2, col = 'blue')
legend('topleft', c('Acer rubrum', 'Abies fraseri'), col = c('red', 'blue'),
pch = c(1, 2), lty = c(1, 2), bty = 'n')
ggplot(data = rubrum, mapping = aes(x = elev, y = cover)) +
labs(title = 'Acer rubrum Plot Elevation (m) vs. Abundance', x = 'Plot Elevation (m)', y = "Abundance") +
geom_point(mapping = aes(color = species)) +
geom_smooth(mapping = aes(linetype = species, color = species), method = 'loess') +
scale_color_manual(values = "red") +
theme_classic()
ggplot(data = fraseri, mapping = aes(x = elev, y = cover)) +
labs(title = 'Abies fraseri Plot Elevation (m) vs. Abundance', x = 'Plot Elevation (m)', y = "Abundance") +
geom_point(mapping = aes(color = species)) +
geom_smooth(mapping = aes(linetype = species, color = species), method = 'loess') +
scale_color_manual(values = "blue") +
theme_classic()
rubrum_main_mod = lm(cover ~ elev + beers + tci + streamdist + disturb, data = rubrum)
#Stats for rubrum_main_mod
summary(rubrum_main_mod)
anova(rubrum_main_mod)
#Analysis of potential interactions within Acer rubrum data
par(mfrow=c(6, 6))
pairs(cover ~ elev + tci + streamdist + disturb + beers, subset = species == "Acer rubrum", data = trees)
pairs(rubrum, lower.panel = panel.smooth, upper.panel = panel.cor)
#Analysis of potential interactions within Abies fraseri data
par(mfrow=c(6, 6))
pairs(cover ~ elev + tci + streamdist + disturb + beers, subset = species == "Abies fraseri", data = trees)
pairs(fraseri, lower.panel = panel.smooth, upper.panel = panel.cor)
#Abies fraseri interaction model
fraseri_interaction_mod = lm(cover ~ elev + streamdist + disturb + beers + elev*streamdist + tci*beers, data = fraseri)
summary(fraseri_interaction_mod)
anova(fraseri_interaction_mod)
#Abies fraseri interaction model
fraseri_interaction_mod = lm(cover ~ elev + streamdist + disturb + beers + elev*streamdist + tci*beers, data = fraseri)
summary(fraseri_interaction_mod)
anova(fraseri_interaction_mod)
getwd()
setwd("C:/Users/jbstrange2202/Desktop/quantmethods")
